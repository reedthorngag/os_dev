#!/bin/bash

clear

rm bin/compiled

python3 preprocessor.py "bootloader.asm" src/bootloader

cd bin

rm *.o

touch compiled

nasm -f elf64 output.asm -o asm.ob || rm compiled

nasm -f elf64 ./../src/bootloader/shared_data.asm -o asm.o || rm compiled

gcc -c -g -Wall -m64 ../src/kernel/*.c ../src/util/*.c ../src/drivers/*.c -I ../src/global_includes/ -I ../src/util/ -I ../src/kernel/ -I ../src/kernel/memory/ -I ../src/drivers/ -mcmodel=large -nostdlib -ffreestanding -mno-red-zone -fno-exceptions -nodefaultlibs -fno-builtin -fno-pic || rm compiled

ld -m elf_x86_64 -static -nostdlib -T ../kernel_linker.ld *.o *.o.d -o kernel.img || rm compiled
rm *.o

gcc -c -g -Wall -m64 ../src/bootloader/*.c -I ../src/global_includes/ -I ../src/util/ -mcmodel=large -nostdlib -ffreestanding -mno-red-zone -fno-exceptions -nodefaultlibs -fno-builtin -fno-pic || rm compiled

ld -m elf_x86_64 -static -nostdlib -T ../bootloader_linker.ld asm.ob second_stage.o -o bootloader.img || rm compiled

if [ ! -e compiled ]
then
    exit 1
fi

truncate -s 8K bootloader.img
cat bootloader.img > os.img
cat kernel.img >> os.img


rm asm.ob
rm *.o

#mkisofs -no-emul-boot -input-charset utf-8 -boot-load-size 10 -exclude-list ../exclude.txt -o os.iso -b os.img .

truncate -s 1M os.img

echo compiled

cd ..

